windowlist title '%{+ub}Num  Title%020=  Hardstatus%-07=  Flags%{-}'
windowlist string '%3n  %t%020=  %h%-07=  %f'

# Without the following setting, GNU screen shows an annoying message
# "Utmp slot not found" on startup.
deflogin off

bell_msg "Bell in window %n^G"
vbell on
altscreen on
defencoding UTF-8
defutf8 on

# This must match "Treat CJK ambiguous character as wide" checkbox in
# PuTTY configuration. Both `on` and `off` have pros and cons:
#
#   * If set to `on`, output of some programs, including
#     `dpkg-reconfigure`, is disturbed.
#   * If set to `off`, display of Japanese text including some symbols
#     is disturbed.
cjkwidth on

defscrollback 10000
bind ^x
escape ^z^z
#hardstatus alwayslastline "%{= bw}%02c:%02s%{-}"
startup_message off

# The following setting of `term` seems the best to run Emacs with a
# theme that requires 256 colors.
term "$SCREEN_TERM"

screen -t top 99 top -d1

chdir
screen

# Start `gnu_screen_helper` script.  In order for the script to work
# properly, first set up a virtual environment on `~/.local` with
# `$ python3 -m venv ~/.local`, and then install the script with
# `. ~/.local/bin/activate && pip3 install $WORK_TREE`.
#
# `gnu_screen_helper` script formats and updates the hardware statuses
# of all GNU screen sessions with a short interval.  Therefore, the
# hardware statuses look like reflecting information in real time.  In
# addition, it always keeps track of changes in terminal sizes so that
# the format of hardware statuses is kept to fit to the terminal size
# dynamically.
#
# The script is daemonized.  Therefore, the following `screen` command
# temporarily creates a new window although, the script exits
# immediately, and the window is closed accordingly.
#
# With `--daemonize` option, a forked process of the script still
# continues to run in background after that.  The process will terminate
# automatically when there is no longer any GNU screen session.  It is
# therefore not necessary to terminate the process manually.
#
# `gnu_screen_helper` with `--daemonized` option can be invoked multiple
# times without any hindrance.  Such a situation happens when creating
# multiple GNU screen sessions.  When a background process of
# `gnu_screen_helper` is running, invoking `gnu_screen_helper` do not
# fork any further background process, has no effect, and then exits
# immediately.
screen bash -c '{ . ~/.local/bin/activate && gnu_screen_helper --daemonize --fqdn; } || sleep 60'
