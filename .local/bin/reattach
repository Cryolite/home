#!/usr/bin/env bash

set -euo pipefail

. "$HOME/.local/bin/common.sh"

function print-usage ()
{
  cat <<'EOF'
Usage: reattach [pid[.tty.host]]

Resume a detached GNU screen session, and prepare `fix-environment' command for
the resumed GNU screen session. If a connection to an SSH authentication agent
is being forwarded to the current environment, then `fix-environment' command
enables further forwarding of the agent connection to the resumed GNU screen
session. If the current environment has a Kerberos credentials cache, then
`fix-environment' also caches the Kerberos credentials in the resumed GNU
screen session. `fix-environment' command should be executed within the session
reattached by this command.

  -h, --help                 Display this help and exit.
EOF
}

case "${1-}" in
-h|--h|--he|--hel|--help)
  set +x
  print-usage
  exit 0
  ;;
esac

if (( $# > 1 )); then
  die-with-user-error "Too many arguments."
fi

if (( $# == 1 )) && [[ ! $1 =~ ^[1-9][[:digit:]]* ]]; then
  die-with-user-error "An invalid argument \`$1'."
fi

matched_detached_sessions=()
while IFS= read -r line; do
  matched_detached_sessions+=("$line")
# `screen -ls` on screen 4.0 exits with a non-zero status code.
done < <({ screen -ls ${1+"$1"} || true; } | grep -F Detached | cut -f 2)

if (( ${#matched_detached_sessions[@]} == 0 )); then
  die-with-runtime-error "$(screen -r ${1+"$1"} || true)"
fi

if (( ${#matched_detached_sessions[@]} > 1 )); then
  die-with-runtime-error "$({ screen -r ${1+"$1"} || true; } |& sed -e 's/^Type \"screen \[-d\] -r /Type \"reattach /')"
fi

session="${matched_detached_sessions[0]}"

# On Debian 9 (Stretch) and CentOS 7, the entity in the socket directory
# corresponding to an existing session is a socket.
# On CentOS 6, the entity in the socket directory corresponding to an
# existing session is a fifo.
if [[ ! -S $("$HOME/.screen/screendir.sh")/$session && ! -p $("$HOME/.screen/screendir.sh")/$session ]]; then
  die-with-logic-error
fi

"$HOME/.screen/rm-stale-session-dirs.sh"

mkdir -m 700 -p "$HOME/.screen/sessions"
mkdir -m 700 -p "$HOME/.screen/sessions/$session"

fix_script="$HOME/.screen/sessions/$session/fix-environment.sh"

install -m 600 /dev/null "$fix_script"

for varname in SSH_AUTH_SOCK SSH_CLIENT SSH_CONNECTION SSH_TTY KRB5CCNAME; do
  if declare -p "$varname" &>/dev/null; then
    echo "export $varname='${!varname}'" >>"$fix_script"
  fi
done

exec screen -r "$session"
